#!/usr/bin/python
# bean-add - A beancount transaction entry assistant
# Author: Simon Volpert <simon@simonvolpert.com>
# License: "Do what you feel is right, but don't be a jerk" public license.
# See the README.md file for additional information

import readline
import sys
import datetime

usage = '''bean-add [-n] FILENAME
A beancount transaction entry assistant.

-n		Dry run (do not write out transactions)
-h, --help	Display this help message'''

dry_run = False

# Process command line arguments
if len(sys.argv) < 2:
	print(usage)
	sys.exit(1)

if sys.argv[1] == '-n':
	dry_run = True
	del(sys.argv[1])
elif sys.argv[1] == '-h' or sys.argv[1] == '--help':
	print(usage)
	sys.exit()

if len(sys.argv) < 2:
	print(usage)
	sys.exit(1)

# Init transaction data
class data(object):
	array = []
	flag = False
	txid = 0
	accounts = []
	defaults = {}
	commands = ['balance']
	currencies = []
	description = ''

# Ask for confirmation: str(prompt) -> bool(result)
def confirm(prompt=''):
	global vocab
	# Unset completion
	vocab = []
	while True:
		ch = input(prompt).lower()
		if ch == 'y':
			return True
		elif ch == 'n':
			return False

# Read and process journal file
with open(sys.argv[1], 'r') as source_file:
	tx_file = source_file.read()

description = ''
for line in tx_file.split('\n'):
	line = line.strip()
	if line == '':
		# Transaction came out empty
		if description in data.defaults and data.defaults[description] == []:
			del(data.defaults[description])
		description = ''
		continue
	# Skip comments
	elif line.startswith(';'):
		continue
	_data = line.split(' ')
	try:
		# Attach transaction legs to previous description
		if _data[0] in data.accounts:
			data.defaults[description].append(_data[0])
			# Transaction leg has a currency sign
			if len(_data) == 3:
				_cur = _data.pop()
				if _cur not in data.currencies:
					data.currencies.append(_cur)
		# Add account name to account list
		elif _data[1] == 'open':
			data.accounts.append(_data[2])
		# Cache command data
		elif _data[1] in data.commands:
			data.defaults[_data[1]] = [_data[2]]
		# Record a description
		else:
			description = line[13:].strip('" ')
			data.defaults[description] = []
	except IndexError:
		continue

# Prepare file for transaction insertion
data.array = tx_file.split('\n\n')
for i in range(len(data.array)):
	data.array[i] = data.array[i].strip()
	if data.array[i] == '':
		del data.array[i]
		i -= 1

# Set up the completer
readline.parse_and_bind("tab: complete")

def complete(text, state):
	results = [x for x in vocab if x.startswith(text)] + [None]
	return results[state]

readline.set_completer(complete)

# Print some statistics
print('Read %s block(s) of data' % len(data.array))
if len(data.accounts) > 0:
	print('%s account(s), %s unique description(s), %s currency sign(s) loaded' % (len(data.accounts), len(data.defaults), len(data.currencies)))
	if dry_run:
		print('Working in dry run mode; transactions will not be written.')
	print()
else:
	print('File contains no account definitions.')
	if not confirm('Proceed with editing? (y/n) '):
		sys.exit()

# Init date and currencies
date = datetime.date.today().isoformat()
cur = data.currencies[0]

# Insert a transaction in an appropriate place in the file: str(transaction) -> int(index)
def insert_transaction(tx):
	for tx_index in range(len(data.array)):
		# Ignore comments
		if data.array[tx_index].startswith(';'):
			continue
		# Seek forward to first bigger date
		if data.array[tx_index][0:10] > tx[0:10]:
			data.array.insert(tx_index, tx)
			print('\nTransaction added at block %s' % tx_index)
			return tx_index
	# If not found, insert at the end of file
	if ( tx_index + 1 ) == len(data.array):
		tx_index += 1
		data.array.append(tx)
	print('\nTransaction added at block %s' % tx_index)
	return tx_index

# Date from string wrapper: str(date) -> date(date)
def strpdate(d):
	return datetime.datetime.strptime(d, '%Y-%m-%d').date()

# Read and validate a date: str(default) -> str(date)
def get_date(default):
	while True:
		reading = input('Enter transaction date (%%Y-%%m-%%d, or +/-days) [%s]: ' % default)
		# Accepting the default
		if reading == '':
			return default
		date = strpdate(default)
		# Relative date
		if reading.startswith('+') or reading.startswith('-'):
			try:
				date += datetime.timedelta(int(reading))
			except ValueError:
				continue
		# Absolute date
		else:
			try:
				date = strpdate(reading)
			except ValueError:
				continue
		return date.isoformat()

# Read and normalize transaction amount
def get_amount(default):
	try:
		pass
	except ValueError:
		pass
	finally:
		return default

# Toggle transaction flag
def toggle_flag(tx_index):
	if data.flag:
		data.flag = False
		data.array[tx_index] = data.array[tx_index].replace(' ! ', ' * ')
	else:
		data.flag = True
		data.array[tx_index] = data.array[tx_index].replace(' * ', ' ! ')


# Main data entry loop
while True:
	output = ''
	definitions = ''
	defaults = []
	_transaction = []
	total = 0
	date = get_date(date)
	vocab = data.defaults.keys()
	readline.set_completer_delims('')
	description = input('Enter transaction description (or `balance`) [%s]: ' % data.description)
	if description == 'balance':
		print('\nBalance assertion mode.')
	else:
		if description == '':
			description = data.description
		output += '%s %s "%s"\n' % (date, '!' if data.flag else '*' , description)
		data.description = description
	if description in data.defaults:
		print('Previously used accounts for this transaction:')
		defaults = data.defaults[description]
		for _account in defaults:
			print('\t%s' % _account)
		print()
		if not confirm('Use these accounts? (y/n) '):
			defaults = []
	while True:
		if len(defaults) > 0:
			account = defaults[0]
			del(defaults[0])
		else:
			vocab = data.accounts
			account = input('Enter account name (tab to complete, enter to fininsh): ')
			if account == '':
				break
			# Add new account option
			if account not in data.accounts:
				if not confirm('The account `%s` is not in the journal file. Add it? (y/n) ' % account):
					continue
				definitions += '%s open %s\n' % (date, account)
				data.accounts.append(account)
		_transaction.append(account)
		vocab = data.currencies
		readline.set_completer_delims(' ')
		amount = get_amount(total) # todo
		amount = input('Enter amount for `%s` (including currency symbol) [%s %s]: ' % (account, total, cur))
		if amount == "":
			amount = '%s %s' % (total, cur)
		# Normalize entries with unneeded decimal places
		amt = float(amount.split()[0])
		if amt == int(amt):
			amount = '%s %s' % (int(amt), cur)
		if total == 0:
			total = amt * -1
		else:
			total -= amt
		# Normalize amounts with one decimal place
		amt = amount.split()[0]
		_b = amt.split('.')
		if len(_b) > 1 and len(_b[1]) == 1:
			_b[1] += '0'
			amt = '.'.join(_b)
			amount = ' '.join([amt, cur])
		# Detach currency sign for reuse
		if len(amount.split()) == 1:
			amount += ' ' + cur
		else:
			cur = amount.split().pop()
		if description == 'balance':
			output += '%s %s %s %s\n' % (date, description, account, amount)
			break
		else:
			output += '	%s %s\n' % (account, amount)
	data.defaults[description] = _transaction
	if _transaction == []:
		print('Transaction entry aborted.\n')
	else:
		data.txid = insert_transaction('\n'.join([definitions, output]).strip())
		print('\nResults:\n%s\n' % data.array[data.txid])
		while True:
			#cmd = get_command(['nwqh']) # todo
			cmd = input('Enter command (fnwq or h) ')
			if cmd == 'w':
				if not dry_run:
					with open(sys.argv[1], 'w') as source_file:
						source_file.write('\n\n'.join(data.array))
						print('%s block(s) written' % len(data.array))
				else:
					print('Dry run mode, writing disabled.')
			elif cmd == "q":
				print('\nRemember that there is no input validation whatsoever! Please run `bean-check` and correct any errors manually.')
				sys.exit()
			elif cmd == "n":
				break
			elif cmd == 'f':
				toggle_flag(data.txid)
				print('\nResults:\n%s\n' % data.array[data.txid]) # todo
			elif cmd == "h":
				print('f	toggle transaction flag')
				print('n	new transaction')
				print('w	write journal file')
				print('q	quit')
				print('h	show this help')
