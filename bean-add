#!/usr/bin/python
# bean-add - A beancount transaction entry assistant
# Author: Simon Volpert <simon@simonvolpert.com>
# License: "Do what you feel is right, but don't be a jerk" public license.
# See the README.md file for additional information

import readline
import sys
import datetime

usage = '''bean-add [-n] FILENAME
A beancount transaction entry assistant.

-n		Dry run (do not write out transactions)
-h, --help	Display this help message'''

dry_run = False

# Process command line arguments
if len(sys.argv) < 2:
	print(usage)
	sys.exit(1)

if sys.argv[1] == '-n':
	dry_run = True
	del(sys.argv[1])
elif sys.argv[1] == '-h' or sys.argv[1] == '--help':
	print(usage)
	sys.exit()

if len(sys.argv) < 2:
	print(usage)
	sys.exit(1)

# Set up the completer
readline.parse_and_bind("tab: complete")

# Init transaction data
accounts = []
transactions = {}
commands = ['balance']
currencies = []

def confirm(prompt=''):
	global vocab
	vocab = []
	while True:
		ch = input(prompt).lower()
		if ch == 'y':
			return True
		elif ch == 'n':
			return False

# Read and process journal file
with open(sys.argv[1], 'r') as source_file:
	tx_file = source_file.read()

description = ''
for line in tx_file.split('\n'):
	line = line.strip()
	if line == '':
		if description in transactions and transactions[description] == []:
			del(transactions[description])
		description = ''
		continue
	elif line.startswith(';'):
		continue
	data = line.split(' ')
	try:
		if data[0] in accounts:
			transactions[description].append(data[0])
			if len(data) == 3: # Has a currency sign
				_cur = data.pop()
				if _cur not in currencies:
					currencies.append(_cur)
		elif data[1] == 'open':
			accounts.append(data[2])
		elif data[1] in commands:
			transactions[data[1]] = [data[2]]
		else:
			description = line[13:].strip('" ')
			transactions[description] = []
	except IndexError:
		continue

tx_file = tx_file.split('\n\n')
for i in range(len(tx_file)):
	tx_file[i] = tx_file[i].strip()
	if tx_file[i] == '':
		del tx_file[i]
		i -= 1

# Print some statistics
print('Read %s block(s) of data' % len(tx_file))
if len(accounts) > 0:
	print('%s account(s), %s unique description(s), %s currency sign(s) loaded' % (len(accounts), len(transactions), len(currencies)))
	if dry_run:
		print('Working in dry run mode; transactions will not be written.')
	print()
else:
	print('File contains no account definitions.')
	if not confirm('Proceed with editing? (y/n) '):
		sys.exit()

def complete(text, state):
	results = [x for x in vocab if x.startswith(text)] + [None]
	return results[state]

readline.set_completer(complete)

# Init date and currencies
date = datetime.date.today()
date = '%04d-%02d-%02d' % (date.year, date.month, date.day)
cur = currencies[0]

def insert_transaction(tx):
	global tx_file
	print(tx)
	for tx_index in range(len(tx_file)):
		if tx_file[tx_index].startswith(';'): # Ignore comments
			continue
		if tx_file[tx_index] == '':
			continue
		if tx_file[tx_index][0:10] > tx[0:10]:
			tx_file.insert(tx_index, tx)
			break
		if ( tx_index + 1 ) == len(tx_file):
			tx_index += 1
			tx_file.append(tx)
	print('Inserted transaction at position %s' % tx_index)
	print(len(tx_file)) # debug
	return tx_index


# Main data entry loop
while True:
	output = ''
	definitions = ''
	defaults = []
	_transaction = []
	total = 0
	_reading = input('Enter transaction date [%s]: ' % date)
	date = _reading if _reading != '' else date
	vocab = transactions.keys()
	readline.set_completer_delims('')
	description = input('Enter transaction description (or `balance`): ')
	if description == 'balance':
		print('\nBalance assertion mode.')
	else:
		output += '%s * "%s"\n' % (date, description)
	if description in transactions:
		print('Previously used accounts for this transaction:')
		defaults = transactions[description]
		for _account in defaults:
			print('\t%s' % _account)
		print()
		if not confirm('Use these accounts? (y/n) '):
			defaults = []
	while True:
		if len(defaults) > 0:
			account = defaults[0]
			del(defaults[0])
		else:
			vocab = accounts
			account = input('Enter account name (tab to complete, enter to fininsh): ')
			if account == '':
				break
			if account not in accounts:
				if not confirm('The account `%s` is not in the journal file. Add it? (y/n) ' % account):
					continue
				definitions += '%s open %s\n' % (date, account)
		_transaction.append(account)
		vocab = currencies
		readline.set_completer_delims(' ')
		amount = input('Enter amount for `%s` (including currency symbol) [%s %s]: ' % (account, total, cur))
		if amount == "":
			amount = '%s %s' % (total, cur)
		amt = float(amount.split()[0])
		if amt == int(amt):
			amt = int(amt)
		if total == 0:
			total = amt * -1
		else:
			total -= amt
		cur = amount.split().pop()
		if description == 'balance':
			output += '%s %s %s %s\n' % (date, description, account, amount)
			break
		else:
			output += '	%s %s\n' % (account, amount)
	transactions[description] = _transaction
	if _transaction == []:
		print('Transaction entry aborted.\n')
	else:
		tx_index = insert_transaction('\n'.join([definitions, output]).strip())
		if not dry_run:
			#print('\n\n'.join(tx_file))
			#continue # debug
			with open(sys.argv[1], 'w') as source_file:
				#source_file.write(definitions + '\n')
				#source_file.write(output)
				source_file.write('\n\n'.join(tx_file))
				print('%s record(s) written' % len(tx_file))
			print('\nTransaction recorded.')
		print('\nResults:\n%s\n%s' % (definitions, output))
	if not confirm('Input anoter transaction? (y/n) '):
		print('\nRemember that there is no input validation whatsoever! Please run `bean-check` and correct any errors manually.')
		sys.exit()

