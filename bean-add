#!/usr/bin/python
# bean-add - A beancount transaction entry assistant
# Author: Simon Volpert <simon@simonvolpert.com>
# License: "Do what you feel is right, but don't be a jerk" public license.
# See the README.md file for additional information

usage = 'Usage: bean-add FILENAME'

import readline
import sys
import datetime
import subprocess

# Process command line arguments
if len(sys.argv) < 2:
	sys.exit(usage)
elif sys.argv[1] == '-h' or sys.argv[1] == '--help':
	sys.exit(usage)
elif len(sys.argv) < 2:
	sys.exit(usage)

# Init transaction data
class data(object):
	# Journal/transactions
	journal = []
	saved = []
	defaults = {}
	restore = []
	# Completion
	accounts = []
	currencies = []
	tags = []
	vocab = []
	# Current transaction
	description = ''
	cur = ''
	balance = 0
	flag = False
	tag = 'bean-add'
	txid = -1
	date = datetime.date.today().isoformat()

# Ask for confirmation: str(prompt) -> bool(result)
def confirm(prompt='', default_yes=None):
	# Unset completion
	data.vocab = []
	readline.set_completer_delims('')
	# Get a valid confirmation
	while True:
		ch = input(prompt).lower()
		if ch == '':
			if default_yes is None:
				continue
			ch = 'y' if default_yes else 'n'
		if ch == 'y':
			return True
		elif ch == 'n':
			return False

# Read and process journal file
try:
	with open(sys.argv[1], 'r') as source_file:
		tx_file = source_file.read()
except:
	sys.exit('Could not open the file `%s`.' % sys.argv[1])

description = ''
for line in tx_file.split('\n'):
	line = line.strip()
	if line == '':
		# Transaction came out empty
		if description in data.defaults and data.defaults[description] == []:
			del(data.defaults[description])
		description = ''
		continue
	# Skip comments
	elif line.startswith(';'):
		continue
	_data = line.split(' ')
	try:
		# Attach transaction legs to previous description
		if _data[0] in data.accounts:
			data.defaults[description].append(_data[0])
			# Transaction leg has a currency sign
			if len(_data) == 3:
				_cur = _data.pop()
				if _cur not in data.currencies:
					data.currencies.append(_cur)
		# Add account name to account list
		elif _data[1] == 'open':
			data.accounts.append(_data[2])
		# Cache command data
		elif _data[1] == 'balance':
			data.defaults['__balance__'] = [_data[2]]
		elif _data[1] == 'pad':
			data.defaults['__pad__'] = [_data[2], _data[3]]
		# Record a description
		elif _data[1] in '!*':
			description = line[13:].split('#')[0].strip('" ')
			data.defaults[description] = []
			if '#' in line:
				for word in _data:
					if '#' in word:
						if not word[1:] in data.tags:
							data.tags.append(word[1:])
						data.defaults['__tag__'] = word[1:]
	except IndexError:
		continue

# Prepare file for transaction insertion
data.journal = tx_file.split('\n\n')
data.journal = [ i.strip() for i in data.journal ]
# Modification tracking
data.saved = data.journal.copy()
# Remove empty records
_badblocks = []
for i in range(len(data.journal)):
	if data.journal[i] == '':
		_badblocks.insert(0, i)
for i in _badblocks:
		del data.journal[i]

# Set up the completer
readline.parse_and_bind('tab: complete')

def complete(text, state):
	results = [x for x in data.vocab if x.startswith(text)] + [None]
	return results[state]

readline.set_completer(complete)

# Print some statistics
print('%s record(s) processed' % len(data.journal))
if len(data.accounts) > 0:
	print('%s account(s), %s unique description(s), %s currency sign(s), %s tag(s) loaded' % (len(data.accounts), len(data.defaults), len(data.currencies), len(data.tags)))
else:
	print('File contains no account definitions.')
	if not confirm('Proceed with editing? (y/N) ', False):
		sys.exit()
if data.journal != data.saved:
	print('Automatic normalizations applied.')
	data.saved = data.journal.copy()

# Init date and currencies
data.cur = data.currencies[0]

# Insert a transaction in an appropriate place in the file: str(transaction) -> int(index)
def insert_transaction(tx):
	_found = False
	for _txid in range(len(data.journal)):
		# Ignore comments
		if data.journal[_txid].startswith(';'):
			continue
		# Seek forward to first bigger date
		if data.journal[_txid][0:10] > tx[0:10]:
			_found = True
			break
	if _found:
		data.journal.insert(_txid, tx)
	else:
		# If not found, insert at the end of file
		_txid += 1
		data.journal.append(tx)
	print('\nTransaction added as record %s\n\n%s' % (_txid, tx))
	data.txid = _txid

# Date from string wrapper: str(date) -> date(date)
def strpdate(d):
	return datetime.datetime.strptime(d, '%Y-%m-%d').date()

# Read and validate a date: str(default) -> str(date)
def read_date(default):
	# Unset completion
	data.vocab = []
	readline.set_completer_delims('')
	# Get a valid date
	while True:
		reading = input('Enter transaction date (%%Y-%%m-%%d, or +/-days) [%s]: ' % default)
		# Accepting the default
		if reading == '':
			return default
		date = strpdate(default)
		# Relative date
		if reading.startswith('+') or reading.startswith('-'):
			try:
				date += datetime.timedelta(int(reading))
			except ValueError:
				continue
		# Absolute date
		else:
			try:
				date = strpdate(reading)
			except ValueError:
				continue
		return date.isoformat()

# Read a description -> str(description)
def read_description():
	# Set completion
	data.vocab = data.defaults.keys()
	readline.set_completer_delims('')
	# Get a non-empty description
	while True:
		reading = input('Enter transaction description [%s]: ' % data.description).strip(' "')
		if reading == '':
			if data.description != '':
				return data.description
			else:
				return None
		else:
			data.description = reading
			return reading

# Read a valid account name
def read_account():
	# Read a valid account
	while True:
		# Set completion
		data.vocab = data.accounts
		readline.set_completer_delims('')
		reading = input('Enter account name (tab to complete, enter to fininsh): ')
		if reading == '':
			return None
		# Add new account option
		if reading not in data.accounts:
			if not confirm('The account `%s` is not in the journal file. Add it? (Y/n) ' % reading, True):
				continue
			insert_transaction('%s open %s' % (data.date, reading))
			print()
			data.accounts.append(reading)
		return reading

# Read and normalize transaction amount
def read_amount(account):
	# Set completion
	data.vocab = data.currencies
	readline.set_completer_delims(' ')
	# Read an amount
	amount = input('Enter amount for `%s` (including currency symbol) [%s %s]: ' % (account, data.balance, data.cur))
	if amount == '':
		amount = '%s %s' % (data.balance, data.cur)
	# Detach currency sign for reuse
	if len(amount.split()) == 1:
		amount += ' ' + data.cur
	else:
		data.cur = amount.split().pop()
	# Normalize entries with unneeded decimal places
	amt = float(amount.split()[0])
	if amt == int(amt):
		amount = '%s %s' % (int(amt), data.cur)
	if data.balance == 0:
		data.balance = amt * -1
	else:
		data.balance -= amt
	data.balance = int(data.balance) if data.balance == int(data.balance) else round(data.balance, 2)
	# Normalize amounts with one decimal place
	amt = amount.split()[0]
	_b = amt.split('.')
	if len(_b) > 1 and len(_b[1]) == 1:
		_b[1] += '0'
		amt = '.'.join(_b)
		amount = ' '.join([amt, data.cur])
	return amount

# Toggle transaction flag
def toggle_flag():
	if data.txid < 0:
		print('\nNothing to flag, no current transaction.')
		return
	if ' ! ' in data.journal[data.txid]:
		data.flag = True
	else:
		data.flag = False
	if data.flag:
		data.flag = False
		data.journal[data.txid] = data.journal[data.txid].replace(' ! ', ' * ')
		print('\nTransaction flag unset.')
	else:
		data.flag = True
		data.journal[data.txid] = data.journal[data.txid].replace(' * ', ' ! ')
		print('\nTransaction flag set.')
	print()
	print(data.journal[data.txid])

# Add or remove transaction tags
def add_remove_tag():
	if data.txid < 0:
		print('\nNothing to tag, no current transaction.')
		return
	# Set completion
	data.vocab = data.tags
	readline.set_completer_delims('')
	# Get and normalize a tag
	try:
		_tag = input('Enter a tag [%s]: ' % data.defaults['__tag__'])
	except KeyboardInterrupt:
		print('\nTagging cancelled.')
		return
	_tag = _tag.strip('# ')
	if _tag == '':
		_tag = data.defaults['__tag__']
	else:
		data.defaults['__tag__'] = _tag
	# If the tag is already there, offer to remove it instead
	if '#' + _tag in data.journal[data.txid]:
		if confirm('\nThe transaction already has this tag. Remove it? (Y/n) ', True):
			data.journal[data.txid] = data.journal[data.txid].replace(' #%s' % _tag, '')
		else:
			print('\nTagging cancelled.')
			return
	# Apply the tag (using two different methods)
	else:
		_transaction = data.journal[data.txid].replace('"\n', '" #%s\n' % _tag)
		if _transaction == data.journal[data.txid]:
			_transaction = data.journal[data.txid].replace('" #', '" #%s #' % _tag)
		if _transaction == data.journal[data.txid]:
			print('\nCannot add tags to special transactions.')
			return
		data.journal[data.txid] = _transaction
	print()
	print(data.journal[data.txid])

# Seek to a specific record in the journal file
def seek_to_transaction():
	if data.txid > 0:
		print('\nCurrently at record %s.' % data.txid)
	else:
		print('\nNo current record.')
	while True:
		try:
			reading = input('Enter number (0-%s, or +/-count): ' % (len(data.journal) - 1))
			_txid = int(reading)
		except KeyboardInterrupt:
			print('\nSeeking cancelled.')
			return
		except ValueError:
			continue
		if reading.startswith('+') or reading.startswith('-'):
			_txid += data.txid
		if _txid < 0 or _txid > len(data.journal) - 1:
			continue
		else:
			break
	print('\nRecord %s:\n' % _txid)
	print(data.journal[_txid])
	data.txid = _txid

# Find transactions that contain a string
def find_transactions():
	try:
		reading = input('Enter search string: ').strip('\n')
	except KeyboardInterrupt:
		print('Lookup cancelled.')
		return
	if reading == '':
		print('Lookup cancelled.')
		return
	for i in range(len(data.journal)):
		if reading in data.journal[i]:
			print('[%s]	%s' % (i, data.journal[i].split('\n')[0]))

# Get default accounts for a transaction
def get_default_accounts(description):
	if description in data.defaults:
		print('Previously used accounts for this transaction:')
		for _account in data.defaults[description]:
			print('\t%s' % _account)
		print()
		if confirm('Use these accounts? (Y/n) ', True):
			return data.defaults[description]
		else:
			return []
	else:
		return []

# Enter a normal transaction
def read_normal_transaction():
	output = ''
	_transaction = []
	data.balance = 0
	data.date = read_date(data.date)
	description = read_description()
	if description is None:
		print('\nTransaction entry aborted.')
		return
	else:
		output += '%s %s "%s"\n' % (data.date, '!' if data.flag else '*' , description)
	defaults = get_default_accounts(description)
	while True:
		if len(defaults) > 0:
			account = defaults.pop(0)
		else:
			account = read_account()
			if account is None:
				if data.balance != 0:
					if not confirm('\nThe transaction is unbalanced! Really finish? (y/N) ', False):
						continue
				break
		_transaction.append(account)
		amount = read_amount(account)
		output += '	%s %s\n' % (account, amount)
	data.defaults[description] = _transaction
	if _transaction == []:
		print('\nTransaction entry aborted.')
	else:
		insert_transaction(output.strip())

# Read a balance assertion transaction
def read_balance_transaction():
	print('\nAdding a new balance assertion.')
	data.date = read_date(data.date)
	defaults = get_default_accounts('__balance__')
	if defaults == []:
		account = read_account()
		data.defaults['__balance__'] = [account]
	else:
		account = defaults[0]
	data.balance = 0
	amount = read_amount(account)
	output = '%s balance %s %s' % (data.date, account, amount)
	insert_transaction(output)

# Read a pad statement
def read_pad_transaction():
	print('\nAdding a new pad statement.')
	data.date = read_date(data.date)
	defaults = get_default_accounts('__pad__')
	if defaults == []:
		account1 = read_account()
		account2 = read_account()
		data.defaults['__pad__'] = [account1, account2]
	else:
		account1, account2 = defaults
	output = '%s pad %s %s' % (data.date, account1, account2)
	insert_transaction(output)

def read_note_transaction():
	# Unset completion
	data.vocab = []
	readline.set_completer_delims('')
	print('\nAdding a new note statement.')
	data.date = read_date(data.date)
	defaults = get_default_accounts('__note__')
	if defaults == []:
		account = read_account()
		data.defaults['__note__'] = [account]
	else:
		account = defaults[0]
	description = input('Enter the note description: ').strip(' "')
	output = '%s note %s "%s"' % (data.date, account, description)
	insert_transaction(output)

# Main data entry loop
print('\nChanges stay in memory until you [w]rite them out.')
print('Type `h` or `?` for a list of available commands.')

while True:
	try:
		cmd = input('\nEnter command (h for help) ')
	except KeyboardInterrupt:
		cmd = 'q'
	if cmd in ['w', 'wq']:
		with open(sys.argv[1], 'w') as source_file:
			source_file.write('\n\n'.join(data.journal) + '\n')
			print('\n%s record(s) written' % len(data.journal))
			data.saved = data.journal.copy()
		if cmd == 'wq':
			sys.exit()
	elif cmd == 'q':
		if data.journal != data.saved:
			if not confirm('The journal file was modified. Really quit? (y/N) ', False):
				continue
		sys.exit()
	elif cmd == 'c':
		with open('/tmp/bean-add.tmp', 'w') as tmp_file:
			tmp_file.write('\n\n'.join(data.journal) + '\n')
			subprocess.call(['bean-check', '/tmp/bean-add.tmp'])
			print('\nValidation finished.')
	elif cmd == 'n':
		try:
			read_normal_transaction()
		except KeyboardInterrupt:
			print('\nTransaction entry cancelled.')
	elif cmd == 'B':
		try:
			read_balance_transaction()
		except KeyboardInterrupt:
			print('\nTransaction entry cancelled.')
	elif cmd == 'P':
		try:
			read_pad_transaction()
		except KeyboardInterrupt:
			print('\nTransaction entry cancelled.')
	elif cmd == 'N':
		try:
			read_note_transaction()
		except KeyboardInterrupt:
			print('\nTransaction entry cancelled.')
	elif cmd == 'f':
		toggle_flag()
	elif cmd == 't':
		add_remove_tag()
	elif cmd == 's':
		seek_to_transaction()
	elif cmd == 'l':
		find_transactions()
	elif cmd == 'r':
		if data.txid >= 0:
			data.restore.append(data.journal.pop(data.txid))
			print('\nDeleted record %s' % data.txid)
			if data.txid >= len(data.journal):
				data.txid -= 1
		else:
			print('\nNothing to delete, no current transaction.')
	elif cmd == 'u':
		if len(data.restore) > 0:
			insert_transaction(data.restore.pop())
		else:
			print('\nNothing to undo, the restore buffer is empty.')
	elif cmd == 'h' or cmd == '?':
		print('''Available commands:
n	new transaction
f	toggle transaction flag
t	add or remove tags
s	seek to another record
l	look up transactions containing a string
r	remove the current transaction
u	undo transaction removal
B	new balance assertion
P	new pad statement
N	new note statement
c	run bean-check on the journal file
w	write journal file
q	quit
wq	write journal file and quit immediately
h,?	show this help message''')
	else:
		print('Unknown command.')
